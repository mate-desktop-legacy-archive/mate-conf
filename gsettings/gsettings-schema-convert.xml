<refentry id="gsettings-schema-convert" lang="en">

<refmeta>
  <refentrytitle>gsettings-schema-convert</refentrytitle>
  <manvolnum>1</manvolnum>
  <refmiscinfo class="manual">User Commands</refmiscinfo>
</refmeta>

<refnamediv>
  <refname>gsettings-schema-convert</refname>
  <refpurpose>MateConf to GSettings schema conversion</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <cmdsynopsis>
    <command>gsettings-schema-convert</command>
    <arg choice="opt" rep="repeat">option</arg>
    <arg choice="req">file</arg>
  </cmdsynopsis>
</refsynopsisdiv>

<refsect1><title>Description</title>
<para><command>gsettings-schema-convert</command> converts between MateConf
and GSettings schema file formats. Note that the conversion is not
expected to be fully automated. You are expected to verify and edit
the result of the conversion.
</para>
<para>
Note that GSettings schemas need to be converted into binary form
with <link linkend="glib-compile-schemas">glib-compile-schemas</link> before they
can be used by applications.
</para>

<refsect2><title>Options</title>
<variablelist>

<varlistentry>
<term><option>-h</option>, <option>--help</option></term>
<listitem><para>
Print help and exit
</para></listitem>
</varlistentry>

<varlistentry>
<term><option>-o <replaceable>OUTPUT</replaceable></option>, <option>--output=<replaceable>OUTPUT</replaceable></option></term>
<listitem><para>
Store the generated output in the file <replaceable>OUTPUT</replaceable>. If no output file is specified, the generated output is written to stdout.
</para></listitem>
</varlistentry>

<varlistentry>
<term><option>-f</option>, <option>--force</option></term>
<listitem><para>
Overwrite the output file if it already exists.
</para></listitem>
</varlistentry>

<varlistentry>
<term><option>-g</option>, <option>--mateconf</option></term>
<listitem><para>
The input file is a MateConf schema.
</para></listitem>
</varlistentry>

<varlistentry>
<term><option>-s</option>, <option>--simple</option></term>
<listitem><para>
Produce a GSettings schema in simple format. The simple format
is easier to edit and can be converted into the XML format with
<command>gsettings-schema-convert</command> later on.
</para></listitem>
</varlistentry>

<varlistentry>
<term><option>-x</option>, <option>--xml</option></term>
<listitem><para>
Produce a GSettings schema in XML format. If the output format
is not explicitly specified, this is the default.
</para></listitem>
</varlistentry>

<varlistentry>
<term><option>-i <replaceable>ID</replaceable></option>, <option>--schema-id=<replaceable>ID</replaceable></option></term>
<listitem><para>
Use <replaceable>ID</replaceable> as the schema id in the generated
GSettings schema.
</para></listitem>
</varlistentry>

<varlistentry>
<term><option>-d <replaceable>DOMAIN</replaceable></option>, <option>--gettext-domain=<replaceable>DOMAIN</replaceable></option></term>
<listitem><para>
Use <replaceable>DOMAIN</replaceable> as the gettext domain in the generated
GSettings schema.
</para></listitem>
</varlistentry>

<varlistentry>
<term><option>-u</option>, <option>--keep-underscores</option></term>
<listitem><para>
Keep underscores in key names instead of replacing them with dashes. GSettings
keys should not contain any underscore.
</para></listitem>
</varlistentry>

</variablelist>
</refsect2>
</refsect1>
<refsect1><title>See also</title>
<para>
<citerefentry>
  <refentrytitle>gsettings-data-convert</refentrytitle>
  <manvolnum>1</manvolnum>
</citerefentry> a related command to migrate user settings
from MateConf to GSettings.
</para>
</refsect1>

</refentry>

